'use client'

import { FiDownload } from 'react-icons/fi'
import { useCallback, useState } from 'react'
import jsPDF from 'jspdf'
import html2canvas from 'html2canvas-pro'
import { JSX } from 'react/jsx-runtime'
import { useTranslation } from 'react-i18next'

interface DownloadButtonProps {
  /** Reference to the DOM element containing the resume content */
  resumeRef: React.RefObject<HTMLDivElement | null>
}

/**
 * DownloadButton component.
 *
 * Captures the referenced resume DOM element and generates a multi-page PDF
 * optimized for US Legal paper size (8.5 x 14 inches).
 * The PDF is generated by slicing the rendered canvas into page-sized segments
 * to avoid content cutoff and ensure clean page breaks.
 *
 * @component
 * @param {DownloadButtonProps} props - Component properties.
 * @param {React.RefObject<HTMLDivElement | null>} props.resumeRef - Reference to the resume element.
 * @returns {JSX.Element} A button that triggers the PDF generation and download.
 */
export default function DownloadButton({ resumeRef }: DownloadButtonProps): JSX.Element {
  const { t } = useTranslation()
  const [isLoading, setIsLoading] = useState(false)

  const handleDownload = useCallback(async () => {
    if (!resumeRef.current || isLoading) return

    setIsLoading(true)
    try {
      const canvas = await html2canvas(resumeRef.current, {
        scale: 3,
        useCORS: true,
        scrollX: 0,
        scrollY: 0,
        windowWidth: resumeRef.current.scrollWidth,
        windowHeight: resumeRef.current.scrollHeight,
      })

      const pdfWidthMm = 216
      const pdfHeightMm = 356

      const imgWidthPx = canvas.width
      const imgHeightPx = canvas.height

      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: [pdfHeightMm, pdfWidthMm],
      })

      const dpi = 96
      const pxPerMm = (dpi / 25.4) * 3 // scale 3 in html2canvas
      const pageHeightPx = pdfHeightMm * pxPerMm

      let heightLeftPx = imgHeightPx
      let positionPx = 0
      let pageCount = 0

      while (heightLeftPx > 0) {
        const segmentHeightPx = Math.min(pageHeightPx, heightLeftPx)

        const pageCanvas = document.createElement('canvas')
        pageCanvas.width = imgWidthPx
        pageCanvas.height = segmentHeightPx

        const pageCtx = pageCanvas.getContext('2d')
        if (!pageCtx) return

        pageCtx.drawImage(
          canvas,
          0,
          positionPx,
          imgWidthPx,
          segmentHeightPx,
          0,
          0,
          imgWidthPx,
          segmentHeightPx
        )

        const pageImgData = pageCanvas.toDataURL('image/jpeg', 1.0)

        const pageImgHeightMm = (segmentHeightPx * pdfWidthMm) / imgWidthPx

        if (pageCount > 0) pdf.addPage()

        pdf.addImage(pageImgData, 'JPEG', 0, 0, pdfWidthMm, pageImgHeightMm)

        positionPx += segmentHeightPx
        heightLeftPx -= segmentHeightPx
        pageCount++
      }

      pdf.save('Roberto-Gallardo-CV-US-Legal.pdf')
    } catch {
      // silently ignore errors
    } finally {
      setIsLoading(false)
    }
  }, [resumeRef, isLoading])

  return (
    <button
      type="button"
      onClick={handleDownload}
      aria-label={t('downloadButton.ariaLabel', 'Download PDF')}
      title={t('downloadButton.title', 'Download PDF')}
      disabled={isLoading}
      className={`
        flex items-center gap-2
        bg-[var(--primary)]
        text-[var(--primary-foreground)]
        font-semibold
        shadow-md
        transition-colors duration-200
        px-4 py-2 rounded-md
        cursor-pointer
        print:hidden
        focus:outline-none focus:ring-4 focus:ring-[var(--primary)]
        focus-visible:bg-[var(--primary)]
        focus-visible:text-[var(--primary-foreground)]
        active:bg-[var(--primary)]
        active:text-[var(--primary-foreground)]
        hover:bg-[var(--secondary)]
        hover:text-[var(--secondary-foreground)]
        hover:shadow-lg
        disabled:cursor-not-allowed disabled:opacity-60
      `}
    >
      <FiDownload className="w-5 h-5 animate-[spin_1s_linear_infinite]" style={{ display: isLoading ? 'inline' : 'none' }} />
      {!isLoading && <FiDownload className="w-5 h-5" />}
      <span>{isLoading ? t('downloadButton.loading', 'Generating...') : t('downloadButton.text', 'Download Resume')}</span>
    </button>
  )
}